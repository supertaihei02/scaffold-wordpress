{# #################################### 
    自分以下のelementを再帰的に出力 
#################################### #}
{% macro render(element, currentSequence) %}
  {% if element.isInput() and element.input_type != 'hidden' %}
    {% set element = updateSequence(element, currentSequence) %}
    {% import 'Builder.twig' as builder %}
    <tr class="form-field form-required term-name-wrap">
      {% if element.input_type == 'button' %}
        <th scope="row"></th>
      {% else %}
        <th scope="row"><label for="{{ element.id }}">{{ element.layer_name }}</label></th>
      {% endif %}
      {% if keyExists(constant('SI_EXTRA_NOTICE'), element.extras) %}
        <td id="notice-{{ element.id }}" class="notice" >element.extras.notice</td>
      {% else %}
        <td id="notice-{{ element.id }}" class="hidden notice" ></td>
      {% endif %}
      <td>{{ builder.input(element, ['regular-text'], []) }}</td>
      <td id="err-{{ element.id }}" class="hidden error" ></td>
    </tr>
  {% elseif element.input_type == 'hidden' %}
    {% import 'Builder.twig' as builder %}
    {{ builder.input(element, [], []) }}
  {% endif %}

  {# START: 子ノードがいる場合再帰的に描画 #}
  {% if element.hasChild() %}
    {% import _self as recursive %}
    {% for child in element.children %}
      {{ recursive.render(child, loop.index) }}
    {% endfor %}
  {% endif %}
  {# END: 子ノードがいる場合再帰的に描画 #}
{% endmacro render %}

{# #################################### 
          Block要素以下を出力
  要素を動的に追加される場合には単独で利用
#################################### #}
{% macro block(element, currentMaxSequence) %}
  {% if currentMaxSequence is empty %}
    {% set currentMaxSequence = getCurrentMaxSequence(element.children) %}
  {% endif %}

  {# START: 第二層 FORM BLOCK #}
  <div {{ easyAttrs(element, ['block', element.multiple_common_id])|raw }}>
    {% if element.layer_name is not empty %}
      <h3>{{ element.layer_name }}</h3>
    {% else %}
      <hr>
    {% endif %}
    <table class="form-table">
      <tbody>
      {# START: 第三層以降 子ノードがいる場合再帰的に描画 #}
      {% if element.hasChild() %}
        {% import _self as recursive %}
        {% for child in element.children %}
          {{ recursive.render(child) }}
        {% endfor %}
      {% endif %}
      {# END: 第三層以降 子ノードがいる場合再帰的に描画 #}
      </tbody>
    </table>
    {% if element.multiple %}
      <div class="button-group">
        {# 削除ボタン #}
        <div data-group-key="{{ element.multiple_common_id }}"
             data-bf-group-id="{{ element.before_block_id }}"
             data-delete-target="{{ element.id }}"
             data-delete-sequence="{{ element.sequence }}"
             class="field-del-button button">削除
        </div>
        {# 追加ボタン #}
        {% set hidden = 'hidden' %}
        {% if element.multiple_last_block %}
          {% set hidden = '' %}
        {% endif %}
        <div data-template="CallWpTermForApi.twig"
             data-group-key="{{ element.multiple_common_id }}"
             data-append-target="{{ element.id }}"
             data-current-sequence="{{ currentMaxSequence }}"
             data-config-path="{{ element.config_path|json_encode() }}"
             class="field-add-button button button-primary {{ hidden }}">追加
        </div>
      </div>
    {% endif %}
  </div>
  {# END: 第二層 FORM BLOCK #}
{% endmacro %}

{# #################################### 
           Form全体を出力
#################################### #}
{% macro form(root, elements, config) %}
  <div class="wrap">
    {{ formSettingForOptions(root, config) }}
    {% for element in elements %}
      {# START: 第一層 FORM GROUP #}
      {% if element.hasChild() %}
        {% for block in element.children %}
          {% import _self as self %}
          {{ self.block(block) }}
        {% endfor %}
      {% endif %}
      {# END: 第一層 FORM GROUP #}
    {% endfor %}
  </div>
{% endmacro %}
